
DROP DATABASE IF EXISTS mindbank;

CREATE DATABASE mindbank;

USE mindbank;

CREATE TABLE User (
	ID INT NOT NULL AUTO_INCREMENT,
	Email VARCHAR (50) NOT NULL UNIQUE,
	UserName VARCHAR (20) NOT NULL UNIQUE,
	Name VARCHAR (20),
	Bio VARCHAR (420),
	ProfileImage BLOB,
	RegisteredTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	LastLoginTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	EmailVerified BOOLEAN NOT NULL DEFAULT FALSE,
	PasswordSalt TEXT NOT NULL,
	PasswordHash TEXT NOT NULL,
	PRIMARY KEY (ID)
);

CREATE TABLE AuthToken (
	ID INT NOT NULL AUTO_INCREMENT,
	UserID INT NOT NULL,
	SecretKey TEXT NOT NULL,
	Selector TEXT NOT NULL,
	Validator TEXT NOT NULL,
	CreatedTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (ID),
	FOREIGN KEY (UserID) REFERENCES User(ID)
);

CREATE TABLE Comment (
	ID INT NOT NULL AUTO_INCREMENT,
	Content VARCHAR (1000) NOT NULL,
	CreatedTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	CreatedByUserID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (CreatedByUserID) REFERENCES User(ID)
);

CREATE TABLE Tag (
	ID INT NOT NULL AUTO_INCREMENT,
	Name VARCHAR (20) NOT NULL UNIQUE,
	CreatedTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	CreatedByUserID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (CreatedByUserID) REFERENCES User(ID)
);

CREATE TABLE Category (
	ID INT NOT NULL AUTO_INCREMENT,
	Name VARCHAR (20) NOT NULL UNIQUE,
	CreatedTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	CreatedByUserID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (CreatedByUserID) REFERENCES User(ID)
);

CREATE TABLE Problem (
	ID INT NOT NULL AUTO_INCREMENT,
	Title VARCHAR (50) NOT NULL,
	Content TEXT NOT NULL,
	Edited BOOLEAN DEFAULT FALSE NOT NULL,
	CreatedTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	LastEditedTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	CreatedByUserID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (CreatedByUserID) REFERENCES User(ID)
);

CREATE TABLE ProblemCategory (
	ID INT NOT NULL AUTO_INCREMENT,
	ProblemID INT NOT NULL,
	CategoryID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (ProblemID) REFERENCES Problem(ID),
	FOREIGN KEY (CategoryID) REFERENCES Category(ID)
);

CREATE TABLE ProblemTag (
	ID INT NOT NULL AUTO_INCREMENT,
	ProblemID INT NOT NULL,
	TagID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (ProblemID) REFERENCES Problem(ID),
	FOREIGN KEY (TagID) REFERENCES Tag(ID)
);

CREATE TABLE ProblemComment (
	ID INT NOT NULL AUTO_INCREMENT,
	ProblemID INT NOT NULL,
	CommentID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (ProblemID) REFERENCES Problem(ID),
	FOREIGN KEY (CommentID) REFERENCES Comment(ID)
);

INSERT INTO User (ID, Email, UserName, Name, Bio, ProfileImage, RegisteredTime, LastLoginTime, EmailVerified, PasswordSalt, PasswordHash) VALUES
(NULL, "jared@jaredible.net", "Jaredible", NULL, NULL, NULL, "2019-11-23 21:52:24", "2019-11-23 21:52:24", FALSE, "[B@396502b9", "e3d51346952c09d8fca12fc2011cff8a79031c9dfb56cafdf147a8cd85d6a2f1050efa26bbde4c2bc27ffa941a775121ea79e1a58a9f2e266e4b1876db10e5be");

INSERT INTO Category (ID, Name, CreatedTime, CreatedByUserID) VALUES
(NULL, "Cat 1", "2019-11-23 21:52:24", 1),
(NULL, "Cat 2", "2019-11-23 21:52:25", 1),
(NULL, "Cat 3", "2019-11-23 21:52:26", 1);

INSERT INTO Tag (ID, Name, CreatedTime, CreatedByUserID) VALUES
(NULL, "Tag 1", "2019-11-23 21:52:24", 1),
(NULL, "Tag 2", "2019-11-23 21:52:25", 1),
(NULL, "Tag 3", "2019-11-23 21:52:26", 1);

INSERT INTO Problem (ID, Title, Content, Edited, CreatedTime, LastEditedTime, CreatedByUserID) VALUES
(NULL, "Problem 1", "This is the first problem.", FALSE, "2019-11-23 21:52:24", "2019-11-23 21:52:24", 1),
(NULL, "Problem 2", "This is the second problem.", FALSE, "2019-11-23 21:52:25", "2019-11-23 21:52:25", 1),
(NULL, "Problem 3", "This is the third problem.", FALSE, "2019-11-23 21:52:26", "2019-11-23 21:52:26", 1);
